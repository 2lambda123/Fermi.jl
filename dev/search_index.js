var documenterSearchIndex = {"docs":
[{"location":"backend/#Backend","page":"Backend","title":"Backend","text":"","category":"section"},{"location":"core/#Core","page":"Core","title":"Core","text":"","category":"section"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"methods/#Quantum-Chemistry-Methods","page":"Methods","title":"Quantum Chemistry Methods","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Fermi.HartreeFock\nFermi.HartreeFock.RHF","category":"page"},{"location":"methods/#Fermi.HartreeFock","page":"Methods","title":"Fermi.HartreeFock","text":"Fermi.HartreeFock\n\nModule for running Hartree–Fock computations in Fermi.\n\n\n\n\n\n","category":"module"},{"location":"methods/#Fermi.HartreeFock.RHF","page":"Methods","title":"Fermi.HartreeFock.RHF","text":"Fermi.HartreeFock.RHF\n\nWave function object for Restricted Hartree-Fock methods\n\nHigh Level Interface\n\nRun a RHF computation and return the RHF object:\n\njulia> @energy rhf\n\nEquivalent to\n\njulia> Fermi.HartreeFock.RHF()\n\nComputes RHF using information from Fermi.CurrentOptions.\n\nFields\n\nName What it holds\nmolecule Molecule object\nenergy RHF Energy\nndocc Number of doubly occupied spatial orbitals\nnvir Number of virtual spatial orbitals\norbitals RHF Orbitals object\ne_conv ΔE from the last iteration\nd_conv RMS from the last iteration\n\nRelevant options\n\nThese options can be set with @set <option> <value>\n\nOption What it does Type choices [default]\nscf_alg Picks SCF algorithm Int [1]\nscf_max_rms RMS density convergence criterion Float64 [10^-9]\nscf_max_iter Max number of iterations Int [50]\nscf_e_conv Energy convergence criterion Float64 [10^-10]\nbasis What basis set to use String [\"sto-3g\"]\ndf Whether to use density fitting Bool true [false]\njkfit What aux. basis set to use for JK String [\"auto\"]\ndiis Whether to use DIIS Bool [true] false\noda Whether to use ODA Bool [true] false\noda_cutoff When to turn ODA off (RMS) Float64 [1E-1]\noda_shutoff When to turn ODA off (iter) Int [20]\nscf_guess Which guess density to use String \"core\" [\"gwh\"]\n\nStruct tree\n\nRHF <: AbstractHFWavefunction <: AbstractWavefunction\n\n\n\n\n\n","category":"type"},{"location":"indice/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"indice/","page":"Index","title":"Index","text":"Below is the list of types and functions mentioned in the documentation.","category":"page"},{"location":"indice/#Types","page":"Index","title":"Types","text":"","category":"section"},{"location":"indice/","page":"Index","title":"Index","text":"Order = [:type]","category":"page"},{"location":"indice/#Functions","page":"Index","title":"Functions","text":"","category":"section"},{"location":"indice/","page":"Index","title":"Index","text":"Order = [:function]","category":"page"},{"location":"bibliography/#Bibliography","page":"Bibliography","title":"Bibliography","text":"","category":"section"},{"location":"#Fermi.jl","page":"Home","title":"Fermi.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia module for ab initio quantum chemistry computations.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fermi.jl is a registred Julia package and, as such, it can be obtained using the standard Julia package manager. From the Julia terminal, use the ] to move to the pkg manager <pre><code><b style=\"color: LimeGreen\">julia></b> # This is the standard Julia terminal, hit ] <b style=\"color: DodgerBlue\">(@v1.6) pkg> </b> # This is the package manager! Hit back space to leave this mode</code></pre> Next add Fermi to the current enviroment. <pre><code><b style=\"color: DodgerBlue\">(@1.6) pkg></b> Add Fermi</pre></code> All the dependencies are going to be downloaded and installed and the code should be ready to work. To test the package you can run <pre><code><b style=\"color: DodgerBlue\">(@1.6) pkg></b> test Fermi</pre></code>","category":"page"},{"location":"#Trouble-shooting","page":"Home","title":"Trouble-shooting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code is built and tested for the latest Julia version on Ubuntu and MacOS. The most fragile step that can lead to problems while building Fermi is the integral library libcint. Namely, libcint must be able to find BLAS in your computer. For Linux, BLAS can be easily installed as","category":"page"},{"location":"","page":"Home","title":"Home","text":"sudo apt-get install libblas-dev liblapack-dev","category":"page"},{"location":"","page":"Home","title":"Home","text":"You might want to check the build.jl file that contains the instructions to fetch and install libcint. This file is in the source code of Fermi. Julia store source codes in the .julia folder. If you used add Fermi to install the package, the source code should be located at .julia/packages/Fermi. Please also refer to the libcint github page for more details on the dependecies there. ","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fermi.jl can be used interactively through the Julia terminal, or you can write a Julia script which will act as the traditional input file present in other quantum chemistry packages. For example, a minimal script to run a RHF computation on a water molecule can be written as","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Fermi\n\n@molecule {\n  O        1.2091536548      1.7664118189     -0.0171613972\n  H        2.1984800075      1.7977100627      0.0121161719\n  H        0.9197881882      2.4580185570      0.6297938830\n}\n\n@set basis sto-3g\n@energy rhf","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you save this file as input.jl, you can run it as a regular script","category":"page"},{"location":"","page":"Home","title":"Home","text":"shell> julia --threads N input.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"where N is the desired number of threads. Alternatively, you can set export JULIA_NUM_THREADS=N in your path.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interactevely, the functions calls are all the same. First you load Fermi in <pre><code><b style=\"color: LimeGreen\">julia></b> using Fermi</code></pre> Next you set the molecule and the options desired. <pre><code><b style=\"color: LimeGreen\">julia></b> @molecule {   O        1.2091536548      1.7664118189     -0.0171613972   H        2.1984800075      1.7977100627      0.0121161719   H        0.9197881882      2.4580185570      0.6297938830 } <b style=\"color: LimeGreen\">julia></b> @set {     basis cc-pvdz     df true }</pre></code> Finally, run the desired energy computations <pre><code><b style=\"color: LimeGreen\">julia></b> @energy mp2</code></pre>","category":"page"},{"location":"#Available-methods","page":"Home","title":"Available methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following methods are currently implemented in Fermi <table align=\"center\">   <tr>     <th>Method</th>     <th>Conventional</th>     <th>Density-Fitted</th>     <th>Single Precision</th>   </tr>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<tr align=\"center\">     <td>RHF</td>     <td>&#10004</td>     <td>&#10004</td>     <td>&#10060</td>   </tr>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<tr align=\"center\">     <td>RMP2</td>     <td>&#10004</td>     <td>&#10004</td>     <td>&#10004</td>   </tr>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<tr align=\"center\">     <td>RCCSD</td>     <td>&#10004</td>     <td>&#10004</td>     <td>&#10004</td>   </tr>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<tr align=\"center\">     <td>RCCSD(T)</td>     <td>&#10004</td>     <td>&#10004</td>     <td>&#10004</td>   </tr> </table>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Only restricted reference methods are currently supported. However, all methods can be run using density fitting by setting @set df true. Moreover, JKFIT and RIFIT basis can be specified as","category":"page"},{"location":"","page":"Home","title":"Home","text":"@set {\n    jkfit cc-pvqz-jkfit\n    rifit cc-pvqz-rifit\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"Single precision calculations are also possible using @set precision single.","category":"page"},{"location":"#About","page":"Home","title":"About","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fermi.jl is developed at the Center for Computational Quantum Chemistry at the University of Georgia under the supervision  of Dr. Justin M. Turney and Prof. Henry F. Schaefer. For any questions, suggestions or if you want to participate in this project, please email Gustavo Aroeira (aroeira at uga.edu).","category":"page"}]
}
